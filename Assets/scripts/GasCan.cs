using UnityEngine;

/* 
 * Written this semester.
 * This script is placed on the generator Gas Can.
 * It allows the player to use the gas can and shake it, spilling blobs of gas everywhare and filling up the ganerator with gas.
 * When this happens, it tells the generator that it has gas, and thus can be started.
 * To fill up the Generator with gas the gas cap must be fully open, the player is holding down the left mouse button and has the crosshair over the gas cap.
 */

/*
 * Keeps all of the possable states that the GasCan can be in
 */
public enum GasCanAnimationState
{
    TowardGenerator,
    Shaking,
    BackToPlayer,
    Held
}

//This one line was generated by unity.
public class GasCan : MonoBehaviour
{
    //How many frames the annimation can run before it stops.
    const int maxAnimationFrames = 500;
    //The speed that the blobs will fly out of the gas can.
    public float gasBlobSpeed = 0.4f;
    //The material to use for the stain of the gas blobs.
    public Material gasSplater;
    //The materal to use for the gas blobs.
    public Material gasMaterial;
    //How many frames since the player held down the left mouse button and has the crosshair over the gas cap.
    public int frameSinceLastPour = 5;
    //Keeps track of the current frame of animation
    int animationFrame = 0;
    //Stores values for interpolating between.
    Vector3 oldPostion;
    Vector3 newPostion;
    Vector3 oldRotation;
    Vector3 newRotation;
    //Where the gas can will be shaken in relation to the cas cap.
    public Vector3 gasCanShakeOffSet = new(0, 2, 0);
    //How much the gas can will shake up and down.
    public float shakeHeight = 0.75f;
    //A reference to the OpenGasCap script.
    OpenGasCap gasCap;

    [HideInInspector]
    //The pick up script attached to this game object.
    public pick_up pickUp;
    //The state the animation is in.
    public GasCanAnimationState state = GasCanAnimationState.Held;
    //Represents if the gas has been poured in the generator.
    bool hasPoured = false;
    //The gas blob to instantiate
    public GameObject gas;

    //Called when the player is holding down the left mouse button and has the crosshair is over the gas cap.
    public void ContinuePouringGas()
    {
        //Since the player is pouring gas this frame, reset this counter.
        frameSinceLastPour = 0;
        //If the annimation has not started yet start it.
        if (state == GasCanAnimationState.Held && !hasPoured)
        {
            hasPoured = true;
            ChangeState(GasCanAnimationState.TowardGenerator);
        }
    }

    //This function handles special cases when the animation state changes.
    void ChangeState(GasCanAnimationState newState)
    {
        //Only change anything if the state is changing to a different state.
        if (newState != state)
        {
            if (newState == GasCanAnimationState.TowardGenerator)
            {
                // When the gas can is starting to go towards the generator set the interpolated values.
                // The current position and rotation.
                oldPostion = transform.position;
                oldRotation = transform.rotation.eulerAngles;
                // The position and rotation we want to be in.
                newPostion = gasCap.transform.position + gasCanShakeOffSet;
                newRotation = new Vector3(-90, 0, 0);
            } else if (newState == GasCanAnimationState.Held)
            {
                // If the state is returning to a non-animation state let the pick-up script constrain the item's position.
                pickUp.constrainHeldItem = true;
            }
            //Reset the animaton frame counter.
            animationFrame = 0;
            //Unless the state is returning to player.
            if (newState == GasCanAnimationState.BackToPlayer)
            {
                //This animation counts backward, so start at a high number.
                animationFrame = 60;
            }
            //Finally, assign the new state.
            state = newState;
        }
    }

    //Perform current animation.
    void GasCanPourAnimation()
    {
        if (state == GasCanAnimationState.TowardGenerator)
        {
            //The progress of the current animation.
            float interpolateTime = (float)animationFrame / 30;
            //The product of a Lerp is called a lerpual, lol.
            //Get the position beteewen the position we are coming from and the position we are moving to.
            Vector3 lerpual = Vector3.Lerp(oldPostion, newPostion, interpolateTime);
            //Get the rotation between the rotation we are rotating from and the rotation we are rotating to.
            Vector3 lerpualRotation = Vector3.Lerp(oldRotation, newRotation, interpolateTime);
            //Assign the interpolated values
            transform.eulerAngles = lerpualRotation;
            transform.position = lerpual;
            //When interpolateTime = 1 than the animation is complete, and the gas can is hovering above the Gas cap. 
            if (interpolateTime >= 1)
            {
                //Change the state to the next animation.
                ChangeState(GasCanAnimationState.Shaking);
            }
        }
        else if (state == GasCanAnimationState.Shaking)
        {
            //Randomly create gas blobs and instantiate them at the gas can.
            if (animationFrame % Random.Range(1, 3) == 0)
            {
                //Create a copy of the gas blob.
                GameObject gasCopy = Instantiate(gas);
                //Unhide the instantiated gas blob.
                gasCopy.SetActive(true);
                //Get references to the Rigidbody and GasSplat script on the instantiated blob.
                Rigidbody rb = gasCopy.AddComponent<Rigidbody>();
                GasSplat gasSplat = gasCopy.AddComponent<GasSplat>();

                //Set the name of the instantiated blob.
                gasCopy.name = "GasBlob";

                //Give the correct material to the gas splat script to use.
                gasSplat.gasSplatMaterial = gasSplater;
                //When the blob is destroyed parent the projector gameobject to the generator.
                gasSplat.projectorParent = FindObjectOfType<Generator>().gameObject;

                //Make the gas blob small and give it some random variation.
                gasCopy.transform.localScale /= 10;
                gasCopy.transform.localScale *= Random.Range(0.01f, 0.75f);

                //Move the gas blob to the bottom of the gas can.
                gasCopy.transform.position = transform.position - new Vector3(0, 0.25f, 0);
                //Give the gas blob the correct material.
                gasCopy.GetComponent<MeshRenderer>().material = gasMaterial;
                //Add a collider to the gas blob so it can collide with objects.
                gasCopy.AddComponent<SphereCollider>();

                //Assign a random rotation to the gas blob.
                Vector3 rotaion = new(0, 0, 0);
                rotaion.x = Random.Range(-180f,180f );
                rotaion.y = Random.Range(-180f, 180f);
                rotaion.z = Random.Range(-180f, 180f);
                gasCopy.transform.eulerAngles = rotaion;

                //Make the gas blob invisible to raycasts.
                gasCopy.layer = 2;

                //Assign a random velocity to the blob using the gasBlobSpeed speed variable.
                Vector3 velcity = Random.insideUnitSphere * gasBlobSpeed;
                //The velocity is moved down to prevent the blobs from moving up.
                velcity -= new Vector3(0, gasBlobSpeed, 0);
                rb.velocity = velcity;
                //Test that the gas blob is not moving upward.
                UnityEngine.Assertions.Assert.IsTrue(rb.velocity.y <= 0);
            }
            //The value to use for the sine wave.
            float interpolateTime = (float)animationFrame / 20;

            //Find the next position using a sine wave to move the gas can up and down.
            Vector3 nextPosition = new(newPostion.x, Mathf.Sin(interpolateTime) * shakeHeight + newPostion.y, newPostion.z);
            transform.position = nextPosition;
        }
        else if (state == GasCanAnimationState.BackToPlayer)
        {
            //Remember this animation is played backward. 

            //The progress of the current animation
            float interpolateTime = (float)animationFrame / 60;
            //Get the position between the position we are coming from and the position we are moving to.
            Vector3 lerpual = Vector3.Lerp(oldPostion, newPostion, interpolateTime);
            //Get the rotation between the rotation we are rotating from and the rotation we are rotating to.
            Vector3 lerpualRotation = Vector3.Lerp(oldRotation, newRotation, interpolateTime);

            //Assign the interpolated values.
            transform.eulerAngles = lerpualRotation;
            transform.position = lerpual;

            //If the animation time is less than zero the gas can has fully returned to the player's hand.
            if (interpolateTime <= 0)
            {
                //The gas can is now in the players hand, end the animation.
                ChangeState(GasCanAnimationState.Held);
                //Tell the generator that is has gas.
                Generator generator = FindObjectOfType<Generator>();
                generator.hasGas = true;
            }
            // Every frame 'animationFrame' will count down, so decrement it by 2 to invalidate the + 1 we get at the end of the frame.
            animationFrame -= 2;
        }
        //Progress the animation.
        animationFrame++;
    }
    private void Update()
    {
        //If the player has poured the gas recently and then animation has not timed out.
        if (frameSinceLastPour < 2 && animationFrame < maxAnimationFrames)
        {
            //If the gas can is not in the players hand then tell the pick-up script to unconstrain the gas can item.
            if (state != GasCanAnimationState.Held)
                pickUp.constrainHeldItem = false;

            // Increment this every frame when it matters.
            frameSinceLastPour++;
            //Play the current animation.
            GasCanPourAnimation();
        }
        //If the current animation has timed out then bring the gas can back to the player.
        else if (state == GasCanAnimationState.Shaking)
        {
            ChangeState(GasCanAnimationState.BackToPlayer);
            //Countinue the current animation.
            GasCanPourAnimation();
        }
        else if (state == GasCanAnimationState.BackToPlayer)
        {
            //Countinue the current animation.
            GasCanPourAnimation();
        }
    }

    private void Awake()
    {
        //Get references to the pick-up script and the OpenGasCap script.
        pickUp = GetComponent<pick_up>();
        gasCap = FindObjectOfType<OpenGasCap>();

        //At the start of the game create a gas blob GameObject and hide it.
        gas = BlobGenerator.GenerateBlobGameObject();
        gas.SetActive(false);
    }
}
