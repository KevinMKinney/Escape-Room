using System.Collections;
using UnityEngine;

/* 
 * Written this semester, starting at line 13.
 * This script handles the current targets color and notifies the target script manager when it is fired at.
 * It is also prepared to be reset when needed.
 */
//This one line was generated by unity.
public class TargetColorChange : MonoBehaviour
{
    //Sets the targets color to a new color from the target script manager.
    void SetColor()
    {
        //Get the mesh renderer and the material.
        MeshRenderer mesh = GetComponent<MeshRenderer>();
        //Get the next available color from the target scrip manager.
        Material material = TargetScriptManager.instance.availableTargetMaterial.Pop();
        //Set the target's color to the next color.
        mesh.sharedMaterial = material;
    }
    public void ResetTarget()
    {
        //Set a new color.
        SetColor();
        //To flip the target back the trigger must be bent back. So, tell the triggers script to change position.
        StopCoroutine(GetComponent<trigger>().FlipTarget());
        //Reset the target by getting the trigger script and rotating the target back to position.
        StartCoroutine(GetComponent<trigger>().FlipTargetBack());
    }
    
    public void Start()
    {
        //Call the ResetTarget function when onReset event is fired.
        TargetScriptManager.instance.onReset += () => {
            ResetTarget();
        };
        //Call the SetColor function when newColor event is fired.
        TargetScriptManager.instance.newColor += () =>
        {
            SetColor();
        };
    }
    //Called by the gun when fired at.
    public void TargitHit(float _)
    {
        //Start the RegisterHit Coroutine.
        StartCoroutine(RegisterHit());
    }

    //Waits for 2 seconds then notifies the target script manager that it was hit.
    public IEnumerator RegisterHit()
    {
        yield return new WaitForSeconds(2);
        TargetScriptManager.instance.FiredAtTarget(this.GetComponent<MeshRenderer>().sharedMaterial);
    }
}
