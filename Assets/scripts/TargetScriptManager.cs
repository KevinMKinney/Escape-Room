using System.Collections.Generic;
using UnityEngine;

/* 
 * Written this semester, starting at line 12.
 * This script handles the target's colors and keeps track of which order they must be fired at to get the reward. It also keeps track of the reward.
 */
//This one line was generated by unity
public class TargetScriptManager : MonoBehaviour
{
    //Setting up a singleton.
    public static TargetScriptManager instance;
    //Events for the targets to subscribe to.
    public event System.Action onReset = () => { };
    public event System.Action newColor = () => { };

    //The colors of the targets, set in the inspector.
    public List<Material> materials = new();
    //A stack which represents the order in which the targets must be fired at.
    public Stack<Material> targetColorOrder = new();
    //This stack represents the colors. The targets pop a color off this stack and use it for its own color.
    public Stack<Material> availableTargetMaterial = new();

    //The reward received when the player fires the targets in the correct order.
    public GameObject gameObjectToEnable;

    //Shuffles the colors of the targets and resets the targetColorOrder stack to the way it was when the game started.
    public void ResetTarget()
    {
        availableTargetMaterial.Clear();
        //Copy the materials from the materials list into a copy array.
        List<Material> targetMaterials = new();
        foreach (Material material in materials)
        {
            targetMaterials.Add(material);
        }
        //Shuffle the copied array, without shuffling the original.
        targetMaterials.Rearrange();
        foreach (Material material in targetMaterials)
        {
            availableTargetMaterial.Push(material);
        }
        //Remove any colors that the player had not hit yet.
        targetColorOrder.Clear();
        //Copy the materials array into targetColorOrder stack.
        foreach (Material copy in materials)
        {
            targetColorOrder.Push(copy);
        }
    }

    public void Awake()
    {
        //Setting up the singleton.
        instance = this;
    }

    // Start is called before the first frame update.
    void Start()
    {
        //Shuffle the materials list. From now on the order of this list determines which order the targets must be fired at.
        materials.Rearrange();
        //Fill the other stacks and set up for the game.
        ResetTarget();
        //The target color scripts may not have subscribed to the events yet, so wait two seconds before firing the event for the first time.
        StartCoroutine(StartGameWithNewColors());
    }

    //Wait two seconds then tell the targets to pick new colors.
    System.Collections.IEnumerator StartGameWithNewColors()
    {
        yield return new WaitForSeconds(2);
        newColor();
    }

    //Called by a target when the target has been hit.
    public void FiredAtTarget(Material self)
    {
        //If the targetColorOrder is empty than the player is erroneously firing at hit targets.
        if (targetColorOrder.Count != 0)
        {
            //Pick the next color off the stack. This is the next color that is supposed to be hit.
            Material target = targetColorOrder.Pop();
            //If the material hit is not the next on that is supposed to be hit than reset the targets.
            if (self != target)
            {
                ResetTarget();
                onReset();
            }
            //If the correct material has hit and the stack is now empty than the player has fired at all the targets in the correct order.
            else if (targetColorOrder.Count == 0)
            {
                //Activate the reward object.
                gameObjectToEnable.SetActive(true);
                //Clear the onReset event. This puzzle is finished.
                onReset = () => { };
            }
        }
    }
}
